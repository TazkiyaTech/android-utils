plugins {
    id 'com.jfrog.bintray' version '1.6'
}

apply plugin: 'maven-publish'
apply plugin: 'com.android.library'

group = getProperty('projectGroupName')
version = getProperty('projectVersionName')

FileCollection proGuardFileCollection = files { file('./proguard').listFiles() }
FileCollection proGuardDebugFileCollection = files { file('./proguard-debug').listFiles() }

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.0'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 24
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        versionCode Integer.parseInt(getProperty('projectVersionCode'))
        versionName getProperty('projectVersionName')
    }

    dexOptions {
        incremental true
        javaMaxHeapSize '1024m'
    }

    buildTypes {
        debug {
            minifyEnabled true
            useProguard false
            proguardFile(getDefaultProguardFile('proguard-android.txt'))
            proguardFiles(proGuardFileCollection)
            proguardFiles(proGuardDebugFileCollection)
        }

        release {
            minifyEnabled true
            useProguard false
            proguardFile(getDefaultProguardFile('proguard-android.txt'))
            proguardFiles(proGuardFileCollection)
        }
    }

    lintOptions {
        abortOnError true
    }
}

dependencies {
//    compile 'com.google.guava:guava:19.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    androidTestCompile 'com.android.support:support-annotations:24.0.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task generateJavadocsJar(type: Jar, dependsOn: generateJavadocs) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}

publishing {
    publications {
        UtilsLibrary(MavenPublication) {
            artifact "$buildDir/outputs/aar/Android-release.aar"
            artifact generateJavadocsJar
            artifact generateSourcesJar

            groupId getProperty('projectGroupName')
//            artifactId "Android"
            version getProperty('projectVersionName')

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

bintray {
    user = getProperty('bintray_user')
    key = getProperty('bintray_api_key')
    publications = ['UtilsLibrary']
    pkg {
        repo = 'maven'
        name = 'utils-library'
//        userOrg = 'Think In Code' // optional
        licenses = ['Apache-2.0']
        vcsUrl = 'https://bitbucket.org/adilson05uk/utils-library.git'

        version {
            name = getProperty('projectVersionName')
            desc = 'Latest release!'
            released  = new Date()
            vcsTag = 'release_' + getProperty('projectVersionName')
        }
    }
}
