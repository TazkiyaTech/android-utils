apply plugin: 'com.android.library'
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'com.jfrog.bintray'

group = getProperty('projectGroupName').toString()
version = getProperty('projectVersionName').toString()

File[] proGuardFileCollection = file('./proguard').listFiles()
File[] proGuardDebugFileCollection = file('./proguard-debug').listFiles()

android {
    buildToolsVersion '26.0.3'
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 26
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError true
    }

    buildTypes {
        debug {
            minifyEnabled true
            useProguard false
            proguardFile(getDefaultProguardFile('proguard-android.txt'))
            proguardFiles(proGuardFileCollection)
            proguardFiles(proGuardDebugFileCollection)
        }

        release {
            minifyEnabled true
            useProguard false
            proguardFile(getDefaultProguardFile('proguard-android.txt'))
            proguardFiles(proGuardFileCollection)
        }
    }
}

dependencies {
    api 'com.android.support:appcompat-v7:26.1.0'
    api 'com.android.support:recyclerview-v7:26.1.0'
    api 'com.android.support:support-annotations:26.1.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.mockito:mockito-core:2.11.0'

    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'org.mockito:mockito-android:2.11.0'
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
    group = 'build'
}

task generateJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
    group = 'build'
}

task generateJavadocJar(type: Jar) {
    from generateJavadoc
    classifier 'javadoc'
    group = 'build'
}

publishing {
    publications {
        UtilsLibrary(MavenPublication) {
            from components.android
            artifact generateJavadocJar
            artifact generateSourcesJar

            groupId getProperty('projectGroupName').toString()
//            artifactId 'Android'
            version getProperty('projectVersionName').toString()
        }
    }
}

bintray {
    user = getProperty('bintray_user').toString()
    key = getProperty('bintray_api_key').toString()
    publications = ['UtilsLibrary']
    pkg {
        repo = 'maven'
        name = 'utils-library'
//        userOrg = 'Think In Code' // optional
        licenses = ['Apache-2.0']
        vcsUrl = 'https://bitbucket.org/adilson05uk/utils-library.git'

        version {
            name = getProperty('projectVersionName').toString()
            desc = 'Latest release!'
            released  = new Date()
            vcsTag = 'release_' + getProperty('projectVersionName').toString()
        }
    }
}
